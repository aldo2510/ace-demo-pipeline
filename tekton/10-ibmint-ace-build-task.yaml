apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: ace-build
spec:
  stepTemplate:
    env:
      - name: "LICENSE"
        value: "accept"
  params:
    - name: outputRegistry
      type: string
    - name: url
      type: string
    - name: revision
      type: string
    - name: buildImage
      type: string
    - name: runtimeBaseImage
      type: string
  results:
    - name: tag
      description: image tag of the form 20240220135127-6fe9106
  steps:
    - name: clone
      image: gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:v0.18.1
      script: |
        #!/bin/sh
        set -e # Fail on error
        cd /work
        git clone -b $(params.revision) $(params.url)
        cd ace-demo-pipeline
        export DATE=$(date '+%Y%m%d%H%M%S')
        export COMMIT=$(git log -1 --pretty=%h)
        export TAG="$DATE"-"$COMMIT"
        echo Setting container tag to "$TAG"
        echo -n "$TAG" > $(results.tag.path)

        # Needed for random userid support
        chmod -R 777 /work/ace-demo-pipeline
      volumeMounts:
        - mountPath: /work
          name: work
    - name: ibmint-build
      image: $(params.buildImage)
      #image: cp.icr.io/cp/appc/ace:13.0.1.0-r1
      #
      # Runs the build and unit test phases, leaving the results in the work directory
      # for later steps.
      #
      script: |
        #!/bin/bash
        
        export LICENSE=accept
        . /opt/ibm/ace-13/server/bin/mqsiprofile
        set -e # Fail on error - this must be done after the profile in case the container has the profile loaded already

        cd /work/ace-demo-pipeline
        mkdir /work/ibmint-output
        mqsicreateworkdir /work/ibmint-output/ace-server
        # Using --compile-maps-and-schemas for 13.0.1 and later . . . 
        ibmint deploy --input-path . --output-work-directory /work/ibmint-output/ace-server --project TeaSharedLibraryJava --project TeaSharedLibrary --project TeaRESTApplication --compile-maps-and-schemas 
        ibmint optimize server --work-dir /work/ibmint-output/ace-server --disable NodeJS

        # Copy the contents of the work directory into a new unit-test-specific work directory
        # This avoids the risk of unit tests files being deployed in the real containers, and
        # is quicker than building the application again
        mqsicreateworkdir /work/ut-work-dir
        (cd /work/ibmint-output/ace-server && tar -cf - * ) | (cd /work/ut-work-dir && tar -xf - )
        # Build just the unit tests
        ibmint deploy --input-path . --output-work-directory /work/ut-work-dir --project TeaRESTApplication_UnitTest

        # Run the unit tests
        IntegrationServer -w /work/ut-work-dir --no-nodejs --start-msgflows false --test-project TeaRESTApplication_UnitTest
      volumeMounts:
        - mountPath: /work
          name: work
    - name: component-test
      image: $(params.buildImage)
      #image: cp.icr.io/cp/appc/ace:13.0.1.0-r1
      #
      # Builds and runs the component tests using the JDBC credentials provided from
      # the secret. Also uses the same init-creds.sh script used by the non-CP4i image
      # to load credentials at startup.
      #
      # Leaves the resulting component test project in the work directory to be picked
      # up by the second Kaniko build in the next step.
      #
      script: |
        #!/bin/bash

        . /opt/ibm/ace-13/server/bin/mqsiprofile

        set -e # Fail on error
        
        export PATH=/opt/ibm/ace-13/common/jdk/bin:$PATH
        # Slightly hacky, but quicker than building everything again!
        (cd /work/ibmint-output/ace-server && tar -cf - * ) | (cd /home/aceuser/ace-server && tar -xf - )
        ls -l /home/aceuser/ace-server
        # Set up credentials for the component tests; init-creds.sh looks in /tmp for policy
        cp /work/ace-demo-pipeline/demo-infrastructure/TEAJDBC.policyxml /tmp/
        bash /work/ace-demo-pipeline/demo-infrastructure/init-creds.sh
        # Build and run the tests
        cd /work/ace-demo-pipeline

        # Build just the component tests
        ibmint deploy --input-path . --output-work-directory /home/aceuser/ace-server --project TeaRESTApplication_ComponentTest

        # Run the component tests
        IntegrationServer -w /home/aceuser/ace-server --no-nodejs --start-msgflows false --test-project TeaRESTApplication_ComponentTest
      volumeMounts:
        - mountPath: /work
          name: work
        - name: secret-volume-2
          mountPath: /var/run/secrets/jdbc
    - name: next-stage-container-setup
      image: $(params.buildImage)
      script: |
        #!/bin/bash
        cd /work/ibmint-output
        mkdir -p home/aceuser/ace-server
        (cd /work/ibmint-output/ace-server && tar -cf - * ) | (cd home/aceuser/ace-server && tar -xf - )

        cp /work/ace-demo-pipeline/demo-infrastructure/TEAJDBC.policyxml home/aceuser/ace-server/
        cp /work/ace-demo-pipeline/demo-infrastructure/application-overrides.txt home/aceuser/ace-server/
        cp /work/ace-demo-pipeline/demo-infrastructure/init-creds.sh home/aceuser/ace-server/ace-startup-script.sh
        cp /work/ace-demo-pipeline/demo-infrastructure/read-hashicorp-creds.sh home/aceuser/ace-server/
        cp /work/ace-demo-pipeline/demo-infrastructure/read-xml-creds.sh home/aceuser/ace-server/

        echo Contents of /work/ibmint-output/ace-server/server.components.yaml
        cat /work/ibmint-output/ace-server/server.components.yaml || /bin/true
        
        # This seems to be needed for OpenShift support due to random userids at runtime
        mkdir -p var/mqsi
        (cd /var/mqsi && tar -cf - * ) | (cd var/mqsi && tar -xf - )
        rm var/mqsi/common/log/* || /bin/true
        chmod -R 777 .
        echo ========================================================================
        echo Create tar file of server contents
        echo ========================================================================
        # Must have the full directory tree from / in the tar file
        tar -cvzf /work/crane-append-file.tar.gz home var
      volumeMounts:
        - mountPath: /work
          name: work
    - name: crane-push
      image: ghcr.io/shortbrain/golang-tasks/crane@sha256:5d2dea205584b1f172cd9f0e68d00df0fbaeabd75894be475af42f092a47ee39
      env:
        - name: "DOCKER_CONFIG"
          value: "/tekton/creds/.docker/"
      script: |
        #!/bin/bash
        date
        export TAG=`cat $(results.tag.path)`
        echo Using $TAG as image tag
        
        echo ========================================================================
        echo Appending server contents tar file to create new image
        echo ========================================================================
        set -e # Fail on error
        set -x
        crane append -b $(params.runtimeBaseImage) -f /work/crane-append-file.tar.gz -t $(params.outputRegistry)/tea-tekton:$TAG
        crane mutate --env "LICENSE=accept" --entrypoint='bash,-c,". /opt/ibm/ace-13/server/bin/mqsiprofile && /home/aceuser/ace-server/ace-startup-script.sh && ibmint apply overrides /home/aceuser/ace-server/application-overrides.txt --work-directory /home/aceuser/ace-server && IntegrationServer -w /home/aceuser/ace-server --admin-rest-api -1 --no-nodejs && IntegrationServer -w /home/aceuser/ace-server"' $(params.outputRegistry)/tea-tekton:$TAG
        date
      volumeMounts:
        - mountPath: /work
          name: work
  volumes:
    - name: work
      emptyDir: {}
    - name: secret-volume-2
      secret:
        secretName: jdbc-secret
