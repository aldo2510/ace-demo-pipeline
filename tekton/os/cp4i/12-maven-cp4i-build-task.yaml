apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: maven-cp4i-build
  namespace: cp4i
spec:
  stepTemplate:
    securityContext:
      runAsUser: 0
    env:
      - name: "HOME"
        value: "/tekton/home"
  params:
    - name: dockerRegistry
      type: string
  steps:
    - name: clone
      image: gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:v0.18.1
      script: |
        #!/bin/sh
        cd /work
        git clone "https://github.com/trevor-dolby-at-ibm-com/ace-demo-pipeline"
      volumeMounts:
        - mountPath: /work
          name: work
    - name: maven-build
      image: $(params.dockerRegistry)/ace-minimal-build:12.0.4.0-alpine
      script: |
        #!/bin/bash
        export LICENSE=accept
        . /opt/ibm/ace-12/server/bin/mqsiprofile
        export PATH=/opt/ibm/ace-12/common/jdk/bin:$PATH
        mkdir /work/maven-output
        cd /work/ace-demo-pipeline
        mvn --no-transfer-progress -Dinstall.work.directory=/work/maven-output/ace-server install
      volumeMounts:
        - mountPath: /work
          name: work
    - name: container-setup
      image: $(params.dockerRegistry)/ace-minimal-build:12.0.4.0-alpine
      script: |
        #!/bin/bash
        cd /work/maven-output
        cp /work/ace-demo-pipeline/tekton/os/cp4i/Dockerfile Dockerfile
        # Fix permissions issues 
        chmod 777 /work/maven-output /work/maven-output/Dockerfile
        chmod -R a+r /work/maven-output
        find /work/maven-output -type d -print | xargs chmod 775
        ls -l /work/maven-output
      volumeMounts:
        - mountPath: /work
          name: work
    - name: docker-build-and-push
      # kaniko is expecting to run as root to build images
      securityContext:
        runAsUser: 0
        capabilities:
          add: ["CHOWN", "DAC_OVERRIDE","FOWNER","SETFCAP","SETGID","SETUID"]
      image: gcr.io/kaniko-project/executor:latest
      # specifying DOCKER_CONFIG is required to allow kaniko to detect docker credential
      env:
        - name: "DOCKER_CONFIG"
          value: "/tekton/home/.docker/"
      command:
        - /kaniko/executor
      args:
        - --dockerfile=/work/maven-output/Dockerfile
        - --destination=$(params.dockerRegistry)/tea-tekton-cp4i
        - --context=/work/maven-output
        - --build-arg=BASE_IMAGE=$(params.dockerRegistry)/ace-server-prod:12.0.5.0-r1-lts
        - --skip-tls-verify
      volumeMounts:
        - mountPath: /work
          name: work
    - name: component-test
      image: $(params.dockerRegistry)/ace-minimal-build:12.0.4.0-alpine
      script: |
        #!/bin/bash
        export LICENSE=accept
        . /opt/ibm/ace-12/server/bin/mqsiprofile
        export PATH=/opt/ibm/ace-12/common/jdk/bin:$PATH
        # Slightly hacky, but quicker than building everything again!
        (cd /work/maven-output/ace-server/run && tar -cf - * ) | (cd /home/aceuser/ace-server/run && tar -xf - )
        ls -l /home/aceuser/ace-server
        # Set up credentials for the component tests; init-creds.sh looks in /tmp for policy
        cp /work/ace-demo-pipeline/demo-infrastructure/TEAJDBC.policyxml /tmp/
        bash /work/ace-demo-pipeline/demo-infrastructure/init-creds.sh
        # Build and run the tests
        cd /work/ace-demo-pipeline/TeaRESTApplication_ComponentTest
        mvn --no-transfer-progress -Dct.work.directory=/home/aceuser/ace-server verify
        # Slightly hacky, but quicker than building everything again!
        (cd /home/aceuser/ace-server/run && tar -cf - * ) | (cd /work/maven-output/ace-server/run && tar -xf - )
      volumeMounts:
        - mountPath: /work
          name: work
        - name: secret-volume-2
          mountPath: /var/run/secrets/jdbc
    - name: container-setup-ct
      image: $(params.dockerRegistry)/ace-minimal-build:12.0.4.0-alpine
      script: |
        #!/bin/bash
        cd /work/maven-output
        cp /work/ace-demo-pipeline/tekton/os/cp4i/Dockerfile Dockerfile
        # Fix permissions issues 
        chmod 777 /work/maven-output /work/maven-output/Dockerfile
        chmod -R a+r /work/maven-output
        find /work/maven-output -type d -print | xargs chmod 775
        ls -l /
      volumeMounts:
        - mountPath: /work
          name: work
    - name: docker-build-and-push-ct
      # kaniko is expecting to run as root to build images
      securityContext:
        runAsUser: 0
        capabilities:
          add: ["CHOWN", "DAC_OVERRIDE","FOWNER","SETFCAP","SETGID","SETUID"]
      image: gcr.io/kaniko-project/executor:latest
      # specifying DOCKER_CONFIG is required to allow kaniko to detect docker credential
      env:
        - name: "DOCKER_CONFIG"
          value: "/tekton/home/.docker/"
      command:
        - /kaniko/executor
      args:
        - --dockerfile=/work/maven-output/Dockerfile
        - --destination=$(params.dockerRegistry)/tea-tekton-cp4i-ct
        - --context=/work/maven-output
        - --build-arg=BASE_IMAGE=$(params.dockerRegistry)/tea-tekton-cp4i
        - --skip-tls-verify
      volumeMounts:
        - mountPath: /work
          name: work
  volumes:
    - name: work
      emptyDir: {}
    - name: secret-volume-2
      secret:
        secretName: jdbc-secret
