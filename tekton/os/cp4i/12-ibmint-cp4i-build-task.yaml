apiVersion: tekton.dev/v1beta1
kind: Task
#
# This task builds the main application, runs the unit tests, runs the component
# tests, and builds two images: the first is the main application image, and the
# second is the component test image (built using the first image as the base).
#
# The second image is not used in this task and is intended to be run in CP4i by
# the next task. Component tests are run in this task as well but do not use the
# CP4i-style configuration mechanism, so verification in CP4i is needed also.
#
metadata:
  name: cp4i-build
  namespace: cp4i
spec:
  # The security and environment settings are needed for OpenShift in a non-default
  # namespace such as cp4i. Kaniko is expecting to be root in the container.
  stepTemplate:
    securityContext:
      runAsUser: 0
    env:
      - name: "HOME"
        value: "/tekton/home"
      - name: "LICENSE"
        value: "accept"
      - name: APP_NAME
        value: $(params.appName)
      - name: APP_NAMESPACE
        value: $(params.appNamespace)
  params:
    - name: outputRegistry
      type: string
    - name: appName
      type: string
    - name: appNamespace
      type: string
    - name: url
      type: string
    - name: revision
      type: string
    - name: buildImage
      type: string
    - name: runtimeBaseImage
      type: string
  results:
    - name: tag
      description: image tag of the form 20240220135127-6fe9106
    - name: sha
      description: container image hash for the application container
    - name: ctsha
      description: container image hash for the component test container
  steps:
    - name: clone
      image: gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:v0.18.1
      #
      # The script clones the repo and sets the TAG result
      # 
      script: |
        #!/bin/sh
        set -e # Fail on error
        cd /work
        git clone -b $(params.revision) $(params.url)
        cd ace-demo-pipeline
        export DATE=$(date '+%Y%m%d%H%M%S')
        export COMMIT=$(git log -1 --pretty=%h)
        export TAG="$DATE"-"$COMMIT"
        echo Setting container tag to "$TAG"
        echo -n "$TAG" > $(results.tag.path)
      volumeMounts:
        - mountPath: /work
          name: work
    - name: ibmint-build
      image: $(params.buildImage)
      #image: cp.icr.io/cp/appc/ace:12.0.11.0-r1
      #
      # Runs the build and unit test phases, leaving the results in the work directory
      # for later steps.
      #
      script: |
        #!/bin/bash

        . /opt/ibm/ace-12/server/bin/mqsiprofile
        
        set -e # Fail on error - this must be done after the profile in case the container has the profile loaded already

        cd /work/ace-demo-pipeline
        mkdir /work/ibmint-output
        mqsicreateworkdir /work/ibmint-output/ace-server
        # Using --compile-maps-and-schemas for 12.0.11 and later . . . 
        ibmint deploy --input-path . --output-work-directory /work/ibmint-output/ace-server --project TeaSharedLibraryJava --project TeaSharedLibrary --project TeaRESTApplication --compile-maps-and-schemas 
        ibmint optimize server --work-dir /work/ibmint-output/ace-server

        # Copy the contents of the work directory into a new unit-test-specific work directory
        # This avoids the risk of unit tests files being deployed in the real containers, and
        # is quicker than building the application again
        mqsicreateworkdir /work/ut-work-dir
        (cd /work/ibmint-output/ace-server && tar -cf - * ) | (cd /work/ut-work-dir && tar -xf - )
        # Build just the unit tests
        ibmint deploy --input-path . --output-work-directory /work/ut-work-dir --project TeaRESTApplication_UnitTest

        # Run the unit tests
        IntegrationServer -w /work/ut-work-dir --no-nodejs --start-msgflows false --test-project TeaRESTApplication_UnitTest
      volumeMounts:
        - mountPath: /work
          name: work
    - name: container-setup
      image: $(params.buildImage)
      #
      # Copies files around and changes permissions to allow Kaniko/buildah to build the actual
      # runtime image in the next step. Also copies the Dockerfile into place for Kaniko/buildah.
      #
      script: |
        #!/bin/bash
        cd /work/ibmint-output
        ls -l /work/ibmint-output
        ls -l /work/ibmint-output/ace-server

        mkdir -p home/aceuser/ace-server
        mv ace-server/run home/aceuser/ace-server/
        
        # Move optimize server componenets
        mv ace-server/server.components.yaml home/aceuser/ace-server/ 

        # Fix permissions issues 
        # chmod 777 /work/ibmint-output /work/ibmint-output/Dockerfile
        chmod -R a+r /work/ibmint-output
        find /work/ibmint-output -type d -print | xargs chmod 775

        echo ========================================================================
        echo Create tar file of server contents
        echo ========================================================================
        # Must have the full directory tree from / in the tar file
        tar -cvzf /work/ibmint-output/crane-append-file.tar.gz home

      volumeMounts:
        - mountPath: /work
          name: work
    - name: build-and-push-image
      image: ghcr.io/shortbrain/golang-tasks/crane@sha256:5d2dea205584b1f172cd9f0e68d00df0fbaeabd75894be475af42f092a47ee39
      env:
        - name: "DOCKER_CONFIG"
          value: "/tekton/home/.docker/"
      script: |
        date
        export TAG=`cat $(results.tag.path)`
        echo Using $TAG as image tag
        crane append -b $(params.runtimeBaseImage) -f /work/ibmint-output/crane-append-file.tar.gz \
          -t $(params.outputRegistry)/$APP_NAME:$TAG
                
        crane digest $(params.outputRegistry)/$APP_NAME:$TAG | tr -d '\n' >> $(results.sha.path)
        date
      volumeMounts:
        - mountPath: /work
          name: work
        - name: varlibcontainers
          mountPath: /var/lib/containers
  volumes:
    - name: work
      emptyDir: {}
    - name: secret-volume-2
      secret:
        secretName: jdbc-secret
    # 
    # Default buildah approach using emptyDir; takes about 2 minutes on a test SNO cluster
    # 
    - name: varlibcontainers
      emptyDir: {}
    # 
    # Local directory for this pipeline; takes a few seconds after initial pull
    # 
    #- name: varlibcontainers
    #  hostPath:
    #    path: '/var/hostPath/buildah-cache'
    #    type: Directory
    # 
    # Sharing the host containers; takes a few seconds
    # 
    #- name: varlibcontainers
    #  hostPath:
    #    path: '/var/lib/containers'
    #    type: Directory
    # 
    # Local disk using LVM operator on SNO; same speed as hostPath
    # 
    #- name: varlibcontainers
    #  persistentVolumeClaim:
    #    claimName: buildah-cache
    # 
    # NFS mount from same subnet; initial pull took 35 minutes, and
    # subsequent builds took around 9 minutes.
    #
    # May also see messages like
    #
    #    time="2024-02-15T00:55:11Z" level=error msg="'overlay' is not supported over nfs at \"/var/lib/containers/storage/overlay\""
    # 
    # or possibly failing with
    #
    # time="2024-02-15T20:05:58Z" level=warning msg="Network file system detected as backing store. Enforcing overlay option `force_mask=\"700\"`. Add it to storage.conf to silence this warning"
    # Error: mount /var/lib/containers/storage/overlay:/var/lib/containers/storage/overlay, flags: 0x1000: permission denied
    # time="2024-02-15T20:05:58Z" level=warning msg="Network file system detected as backing store. Enforcing overlay option `force_mask=\"700\"`. Add it to storage.conf to silence this warning"
    # time="2024-02-15T20:05:58Z" level=warning msg="failed to shutdown storage: \"mount /var/lib/containers/storage/overlay:/var/lib/containers/storage/overlay, flags: 0x1000: permission denied\""
    #
    # if not running privileged
    #- name: varlibcontainers
    #  persistentVolumeClaim:
    #    claimName: buildah-cache-nfs
