apiVersion: tekton.dev/v1beta1
kind: Task
#
# This task builds the main application, runs the unit tests, runs the component
# tests, and builds two images: the first is the main application image, and the
# second is the component test image (built using the first image as the base).
#
# The second image is not used in this task and is intended to be run in CP4i by
# the next task. Component tests are run in this task as well but do not use the
# CP4i-style configuration mechanism, so verification in CP4i is needed also.
#
metadata:
  name: cp4i-build
  namespace: cp4i
spec:
  stepTemplate:
    env:
      #- name: "HOME"
      #  value: "/tekton/home"
      - name: "LICENSE"
        value: "accept"
      - name: APP_NAME
        value: $(params.appName)
  params:
    - name: outputRegistry
      type: string
    - name: appName
      type: string
    - name: url
      type: string
    - name: revision
      type: string
    - name: buildImage
      type: string
    - name: runtimeBaseImage
      type: string
  results:
    - name: tag
      description: image tag of the form 20240220135127-6fe9106
    - name: sha
      description: container image hash for the application container
    - name: ctsha
      description: container image hash for the component test container
  steps:
    - name: clone
      image: alpine/git:v2.49.1
      #
      # The script clones the repo and sets the TAG result
      # 
      script: |
        #!/bin/sh
        set -e # Fail on error
        cd /work
        git clone -b $(params.revision) $(params.url)
        chmod -R 777 .
        cd ace-demo-pipeline
        export DATE=$(date '+%Y%m%d%H%M%S')
        export COMMIT=$(git log -1 --pretty=%h)
        export TAG="$DATE"-"$COMMIT"
        echo Setting container tag to "$TAG"
        echo -n "$TAG" > $(results.tag.path)
      volumeMounts:
        - mountPath: /work
          name: work
    - name: ibmint-build
      image: $(params.buildImage)
      #image: cp.icr.io/cp/appc/ace:13.0.4.0-r1
      #
      # Runs the build and unit test phases, leaving the results in the work directory
      # for later steps.
      #
      script: |
        #!/bin/bash

        . /opt/ibm/ace-13/server/bin/mqsiprofile
        
        set -e # Fail on error - this must be done after the profile in case the container has the profile loaded already

        cd /work/ace-demo-pipeline
        mkdir /work/ibmint-output
        mqsicreateworkdir /work/ibmint-output/ace-server
        # Using --compile-maps-and-schemas for 13.0.1 and later . . . 
        ibmint deploy --input-path . --output-work-directory /work/ibmint-output/ace-server --project TeaSharedLibraryJava --project TeaSharedLibrary --project TeaRESTApplication --compile-maps-and-schemas 
        ibmint optimize server --work-dir /work/ibmint-output/ace-server

        # Copy the contents of the work directory into a new unit-test-specific work directory
        # This avoids the risk of unit tests files being deployed in the real containers, and
        # is quicker than building the application again
        mqsicreateworkdir /work/ut-work-dir
        (cd /work/ibmint-output/ace-server && tar -cf - * ) | (cd /work/ut-work-dir && tar -xf - )
        # Build just the unit tests
        ibmint deploy --input-path . --output-work-directory /work/ut-work-dir --project TeaRESTApplication_UnitTest

        # Run the unit tests
        IntegrationServer -w /work/ut-work-dir --no-nodejs --start-msgflows false --test-project TeaRESTApplication_UnitTest
      volumeMounts:
        - mountPath: /work
          name: work
    - name: container-setup
      image: $(params.buildImage)
      #
      # Copies files around and changes permissions to allow Crane to build the actual
      # runtime image in the next step.
      #
      script: |
        #!/bin/bash
        cd /work/ibmint-output
        ls -l /work/ibmint-output
        ls -l /work/ibmint-output/ace-server

        mkdir -p home/aceuser/ace-server
        mv ace-server/run home/aceuser/ace-server/
        
        # Move optimize server componenets
        mv ace-server/server.components.yaml home/aceuser/ace-server/ 

        # Fix permissions issues 
        #
        # The ACE operator support code in the ace-server-prod container tries to
        # move /home/aceuser/ace-server to an emptyDir mount, and will print errors
        # of the following form if we don't fix the permissions:
        # 
        # 2024-11-19T20:38:49.224Z Attempting to move / symlink /home/aceuser/ace-server to shared mount
        # 2024-11-19T20:38:49.267Z Error deleting original work dir - Error:/usr/bin/rm: exit status 1: rm: cannot remove '/home/aceuser/ace-server/adminLog': Permission denied
        chmod -R 777 /work/ibmint-output

        echo ========================================================================
        echo Create tar file of server contents
        echo ========================================================================
        # Must have the full directory tree from / in the tar file
        tar -cvzf /work/ibmint-output/crane-append-file.tar.gz home

      volumeMounts:
        - mountPath: /work
          name: work
    - name: build-and-push-image
      image: ghcr.io/shortbrain/golang-tasks/crane@sha256:5d2dea205584b1f172cd9f0e68d00df0fbaeabd75894be475af42f092a47ee39
      env:
        - name: "DOCKER_CONFIG"
          value: "/tekton/creds/.docker/"
      script: |
        export TAG=`cat $(results.tag.path)`
        echo Using $TAG as image tag
        echo ========================================================================
        echo Appending server contents tar file to create new image
        echo ========================================================================
        set -e # Fail on error
        set -x
        crane append -b $(params.runtimeBaseImage) -f /work/ibmint-output/crane-append-file.tar.gz \
          -t $(params.outputRegistry)/$APP_NAME:$TAG
                
        crane digest $(params.outputRegistry)/$APP_NAME:$TAG | tr -d '\n' >> $(results.sha.path)
      volumeMounts:
        - mountPath: /work
          name: work
    - name: component-test
      image: $(params.buildImage)
      #image: cp.icr.io/cp/appc/ace:13.0.4.0-r1
      #
      # Builds and runs the component tests using the JDBC credentials provided from
      # the secret. Also uses the same init-creds.sh script used by the non-CP4i image
      # to load credentials at startup.
      #
      # Leaves the resulting component test project in the work directory to be picked
      # up by the second Crane build in the next step.
      #
      script: |
        #!/bin/bash
        
        export LICENSE=accept
        . /opt/ibm/ace-13/server/bin/mqsiprofile
        set -e # Fail on error

        export PATH=/opt/ibm/ace-13/common/jdk/bin:$PATH
        # Slightly hacky, but quicker than building everything again!
        (cd /work/ibmint-output/home/aceuser/ace-server && tar -cf - * ) | (cd /home/aceuser/ace-server && tar -xf - )
        ls -l /home/aceuser/ace-server
        # Set up credentials for the component tests; init-creds.sh looks in /tmp for policy
        cp /work/ace-demo-pipeline/demo-infrastructure/TEAJDBC.policyxml /tmp/
        bash /work/ace-demo-pipeline/demo-infrastructure/init-creds.sh
        # Build and run the tests
        cd /work/ace-demo-pipeline

        # Build just the component tests
        ibmint deploy --input-path . --output-work-directory /home/aceuser/ace-server --project TeaRESTApplication_ComponentTest

        # Run the component tests
        IntegrationServer -w /home/aceuser/ace-server --no-nodejs --start-msgflows false --test-project TeaRESTApplication_ComponentTest
        
        # Quicker than building everything again - we just copy the component test work directory 
        # into the correct location for the container build in the next step
        (cd /home/aceuser/ace-server && tar -cf - * ) | (cd /work/ibmint-output/ace-server && tar -xf - )
      volumeMounts:
        - mountPath: /work
          name: work
        - name: secret-volume-2
          mountPath: /var/run/secrets/jdbc
  
    - name: container-setup-ct
      image: $(params.buildImage)
      #
      # Copies files around and changes permissions to allow Crane to build the component
      # test image in the next step. 
      #
      script: |
        #!/bin/bash

        cd /work/ibmint-output
        ls -l /work/ibmint-output
        ls -l /work/ibmint-output/ace-server

        rm -rf home/aceuser/ace-server || /bin/true
        mkdir -p home/aceuser/ace-server
        mv ace-server/run home/aceuser/ace-server/
        
        # Move optimize server componenets
        mv ace-server/server.components.yaml home/aceuser/ace-server/ 

        # Fix permissions issues 
        #
        # The ACE operator support code in the ace-server-prod container tries to
        # move /home/aceuser/ace-server to an emptyDir mount, and will print errors
        # of the following form if we don't fix the permissions:
        # 
        # 2024-11-19T20:38:49.224Z Attempting to move / symlink /home/aceuser/ace-server to shared mount
        # 2024-11-19T20:38:49.267Z Error deleting original work dir - Error:/usr/bin/rm: exit status 1: rm: cannot remove '/home/aceuser/ace-server/adminLog': Permission denied
        chmod -R 777 /work/ibmint-output

        echo ========================================================================
        echo Create tar file of server contents including component tests
        echo ========================================================================
        # Must have the full directory tree from / in the tar file
        tar -cvzf /work/ibmint-output/crane-append-file-ct.tar.gz home
      volumeMounts:
        - mountPath: /work
          name: work
    
    - name: build-and-push-image-ct
      image: ghcr.io/shortbrain/golang-tasks/crane@sha256:5d2dea205584b1f172cd9f0e68d00df0fbaeabd75894be475af42f092a47ee39
      env:
        - name: "DOCKER_CONFIG"
          value: "/tekton/creds/.docker/"
      script: |
        export TAG=`cat $(results.tag.path)`
        echo Using $TAG as image tag
        echo ========================================================================
        echo Appending server test project contents tar file to create new image
        echo ========================================================================
        set -e # Fail on error
        set -x
        crane append -b $(params.outputRegistry)/$APP_NAME:$TAG -f /work/ibmint-output/crane-append-file-ct.tar.gz \
          -t $(params.outputRegistry)/${APP_NAME}-ct:$TAG
        
        crane digest $(params.outputRegistry)/${APP_NAME}-ct:$TAG | tr -d '\n' >> $(results.ctsha.path)
      volumeMounts:
        - mountPath: /work
          name: work
  volumes:
    - name: work
      emptyDir: {}
    - name: secret-volume-2
      secret:
        secretName: jdbc-secret
