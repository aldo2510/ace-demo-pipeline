apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: deploy-to-cp4i
spec:
  params:
    - name: dockerRegistry
      type: string
  steps:
    - name: clone
      image: gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:v0.18.1
      script: |
        #!/bin/sh
        set -x
        cd /work
        git clone "https://github.com/trevor-dolby-at-ibm-com/ace-demo-pipeline"
        export REG_WITH_ESCAPED_SLASH=`echo $(params.dockerRegistry) | sed 's/\//\\\\\\//g'`
        echo $REG_WITH_ESCAPED_SLASH
        sed -i "s/DOCKER_REGISTRY/$REG_WITH_ESCAPED_SLASH/g" /work/ace-demo-pipeline/tekton/os/cp4i/*.yaml
      volumeMounts:
        - mountPath: /work
          name: work
    - name: deploy-app
      image: lachlanevenson/k8s-kubectl
      script: |
        #!/bin/sh
        set -x
        cd /work
        kubectl get pods -n cp4i
        
        echo "Checking for previous component test leftovers at " `date`
        kubectl get -n cp4i IntegrationServer/tea-tekton-cp4i-ct
        if [ "$?" == "0" ]; then
            echo "Found CR; deleting it at " `date`
            kubectl delete -n cp4i IntegrationServer/tea-tekton-cp4i-ct
            for i in `seq 1 12`
            do
              echo $i
              podName=`kubectl get -n cp4i -l release=tea-tekton-cp4i-ct pod -o name`
              if [ "$podName" == "" ]; then
                echo "Pods not running at " `date`
                rc=0
                break
              else
                echo "Found pod $podName at " `date`
              fi
              sleep 5
            done
            sleep 10
        else
            echo "No CR found at " `date`
        fi
        echo "Creating CR for component test at " `date`
        kubectl apply -f /work/ace-demo-pipeline/tekton/os/cp4i/create-integrationserver-ct.yaml
        rc=1
        echo "Starting polling for operator IS at " `date`
        for i in `seq 1 30`
        do
          echo $i
          kubectl get -n cp4i IntegrationServer/tea-tekton-cp4i-ct
          lastError=`kubectl get -n cp4i IntegrationServer/tea-tekton-cp4i-ct --template={{.status.phase}} 2>&1`
          if [ "$lastError" == "Ready" ]; then
            echo "Container is ready at " `date`
            rc=0
            break
          fi
          sleep 2
        done
        if [ "$rc" == "1" ]; then
            echo "Container start failed; giving up at " `date`
            echo "Current state of the CR:"
            echo "----------------------------------------"
            kubectl get -n cp4i IntegrationServer/tea-tekton-cp4i-ct
            echo "----------------------------------------"
            return 1
        fi
        podName=`kubectl get -n cp4i -l release=tea-tekton-cp4i-ct pod -o name`
        echo "Found pod name $podName; sending 'kill -INT 1'"
        kubectl exec -n cp4i $podName -- ps -ef
        rc=1
        echo "Polling for shutdown at " `date`
        for i in `seq 1 2`
        do
          echo $i
          kubectl exec -n cp4i $podName -- ps -ef > /tmp/ps-output.txt
          lastValue=`cat /tmp/ps-output.txt | tr ' ' '\n' | grep IntegrationServer`
          if [ "$lastValue" == "IntegrationServer" ]; then
            echo "Server still running at " `date`
          else
            rc=0
            break
          fi
          sleep 5
        done
        if [ "$rc" == "1" ]; then
            echo "Server stop failed; giving up at " `date`
            echo "Current state of the CR:"
            echo "----------------------------------------"
            kubectl get -n cp4i IntegrationServer/tea-tekton-cp4i-ct
            echo "----------------------------------------"
            echo "Last ps output:"
            echo "----------------------------------------"
            cat /tmp/ps-output.txt
            echo "----------------------------------------"
            #return 1
        fi
        echo "Running tests at " `date`
        kubectl exec -n cp4i $podName -- bash -c "IntegrationServer -w /home/aceuser/ace-server --start-msgflows false --test-project TeaRESTApplication_ComponentTest"
        if [ "$rc" == "0" ]; then
            echo "Test run succeeded at " `date`
        else
            echo "Test run failed at " `date`
            return 1
        fi
      volumeMounts:
        - mountPath: /work
          name: work
  volumes:
    - name: work
      emptyDir: {}
