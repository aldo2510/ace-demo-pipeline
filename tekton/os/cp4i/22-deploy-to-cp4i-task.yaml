apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: deploy-to-cp4i
  namespace: cp4i
spec:
  stepTemplate:
    securityContext:
      runAsUser: 0
    env:
      - name: DOCKER_REGISTRY
        value: $(params.dockerRegistry)
      - name: APP_NAME
        value: $(params.appName)
      - name: APP_NAMESPACE
        value: $(params.appNamespace)
  params:
    - name: dockerRegistry
      type: string
    - name: appName
      type: string
    - name: appNamespace
      type: string
    - name: url
      type: string
    - name: revision
      type: string
    - name: tag
      type: string
    - name: sha
      type: string
  steps:
    - name: clone
      image: alpine/git:v2.49.1
      script: |
        #!/bin/sh
        set -x
        cd /work
        git clone -b $(params.revision) $(params.url)
        
        export SHA=$(params.sha)
        export TAG=$(params.tag)
        export TARGET_IMAGE=$DOCKER_REGISTRY/$APP_NAME:$TAG@$SHA
        echo "Using $TARGET_IMAGE as image placeholder"

        sed -i "s|IR_IMAGE_PLACEHOLDER|$TARGET_IMAGE|g" /work/ace-demo-pipeline/tekton/os/cp4i/*.yaml
        sed -i "s|APP_NAMESPACE|$APP_NAMESPACE|g" /work/ace-demo-pipeline/tekton/os/cp4i/*.yaml
        sed -i "s|APP_NAME|$APP_NAME|g" /work/ace-demo-pipeline/tekton/os/cp4i/*.yaml
      volumeMounts:
        - mountPath: /work
          name: work
    - name: deploy-app
      image: lachlanevenson/k8s-kubectl
      script: |
        #!/bin/sh
        #set -x
        cd /work
        kubectl get pods -n cp4i
        
        echo "CR YAML for application:"
        cat /work/ace-demo-pipeline/tekton/os/cp4i/create-integrationruntime.yaml
        echo
        echo "Creating CR for application at " `date`
        kubectl apply -f /work/ace-demo-pipeline/tekton/os/cp4i/create-integrationruntime.yaml
        rc=1
        echo "Starting polling for operator IR at " `date`
        for i in `seq 1 48`
        do
          #echo $i
          #kubectl get -n cp4i IntegrationRuntime/tea-tekton-cp4i
          lastError=`kubectl get -n cp4i IntegrationRuntime/tea-tekton-cp4i --template={{.status.phase}} 2>&1`
          if [ "$lastError" == "Ready" ]; then
            echo "Container is ready at " `date`
            rc=0
            break
          fi
          # Minikube doesn't have routes so the CR stays at phase Warning.
          if [ "$lastError" == "Warning" ]; then
          lastStatus=`kubectl get -n cp4i IntegrationRuntime/tea-tekton-cp4i '--template={{(index .status.conditions 0).status}} {{(index .status.conditions 0).type}} {{(index .status.conditions 0).message}}' 2>&1`
            if [ "$lastStatus" == "True Ready IntegrationRuntime is ready." ]; then
              echo "Container is ready (Warning) at " `date`
              rc=0
              break
            fi
          fi
          sleep 5
        done
        if [ "$rc" == "1" ]; then
            echo "Container start failed; giving up at " `date`
            echo "Current state of the CR:"
            echo "----------------------------------------"
            kubectl get -n cp4i IntegrationRuntime/tea-tekton-cp4i
            echo "----------------------------------------"
            return 1
        fi
      volumeMounts:
        - mountPath: /work
          name: work
  volumes:
    - name: work
      emptyDir: {}
